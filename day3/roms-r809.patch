diff -Naur -X exclude.pats day2/src/roms-r809/Master/ocean_coupler.F day3/src/ocn/roms-r809/Master/ocean_coupler.F
--- day2/src/roms-r809/Master/ocean_coupler.F	2016-08-11 12:14:39.000000000 +0300
+++ day3/src/ocn/roms-r809/Master/ocean_coupler.F	2016-08-11 11:20:23.000000000 +0300
@@ -117,6 +117,752 @@
 # ifdef WRF_COUPLING
 #  include "mct_roms_wrf.h"
 # endif
+#endif
+
+#ifdef REGCM_COUPLING
+      USE mod_kinds
+      IMPLICIT NONE
+!
+      PRIVATE
+      PUBLIC :: atm2ocn_coupling
+      PUBLIC :: allocate_atm2ocn
+      PUBLIC :: initialize_atm2ocn 
+!
+!  Declarations.
+!
+      TYPE RCM_DATA
+      real(r8), pointer :: Pair(:,:)
+      real(r8), pointer :: Tair(:,:)
+      real(r8), pointer :: Qair(:,:)
+      real(r8), pointer :: Swrad(:,:)
+      real(r8), pointer :: Lwrad(:,:)
+      real(r8), pointer :: Lwrad_down(:,:)
+      real(r8), pointer :: Lhflx(:,:)
+      real(r8), pointer :: Shflx(:,:)
+      real(r8), pointer :: Rain(:,:)
+      real(r8), pointer :: Uwind(:,:)
+      real(r8), pointer :: Vwind(:,:)
+      real(r8), pointer :: Nhflx(:,:)
+      real(r8), pointer :: EminP(:,:)
+      real(r8), pointer :: Ustr(:,:)
+      real(r8), pointer :: Vstr(:,:)
+      real(r8), pointer :: R1dis(:)
+      real(r8), pointer :: R2dis(:,:)
+      real(r8), pointer :: RTdis(:)
+      real(r8), pointer :: RSdis(:)
+      END TYPE RCM_DATA
+!
+      TYPE (RCM_DATA), PUBLIC, ALLOCATABLE :: rdata(:)
+!
+      INTEGER, PUBLIC, ALLOCATABLE :: CoupleSteps(:) 
+            
+      CONTAINS
 
+      SUBROUTINE atm2ocn_coupling (ng, tile)
+!
+!=======================================================================
+!                                                                      !
+!  This subroutine acquires the coupling data streams between ocean    !
+!  and atmosphere models. Currently, the following data streams are    !
+!  coded:                                                              !
+!                                                                      !
+!     (...) RegCM or HD units                                          !
+!     [...] ROMS  units                                                !
+!                                                                      !
+!  Fields imported form RegCM model:                                   !
+!                                                                      !
+!     * Surface atmospheric pressure (Pa), [mb]                        !
+!     * Surface air relative humidity (percent), [fraction]            !
+!     * Surface (2 m) air temperature (Celsius), [Celsius]             !
+!     * Surface (10 m) U-wind speed (m/s), [m/s]                       !
+!     * Surface (10 m) V-wind speed (m/s), [m/s]                       !
+!     * Precipitation (m/s), [kg/m2/s]                                 !
+!     * Shortwave radiation (Watts/m2), [Celsius m/s]                  !
+!     * Downwelling long wave raditaion (Watts/m2), [Celsius m/s]      !
+!     * Long wave raditaion (Watts/m2), [Celsius m/s]                  !
+!     * Sensible heat flux (Watts/m2), [Celsius m/s]                   !
+!     * Latent heat flux (Watts/m2), [Celsius m/s]                     !
+!     * Net heat flux (SW-LW-LH-SH) (Watts/m2), [Celsius m/s]          !
+!     * Evaporation-Precipitation (m/s), [kg/m2/s]                     !
+!     * Surface (10 m) U-wind stress (N/m2), [N/m2]                    !
+!     * Surface (10 m) V-wind stress (N/m2), [N/m2]                    !
+!                                                                      !
+!  Fields exported to RegCM model:                                     !
+!                                                                      !
+!     * Sea surface potential temperature (Kelvin), [Celsius]          !
+!                                                                      !
+!  Fields imported from HD model:                                      !
+!                                                                      !
+!     * River discharge as source point (m^3/s), [m^3/s]               !
+!       Optional:                                                      !
+!       * River temperature (Celsius), [Celsius]                       !
+!       * River salinity (PSU), [PSU]                                  !
+!     * River discharge as surface boundary condition (m^3/s), [m/s]   !
+!       Surface net freshwater flux: E-P-R                             !
+!                                                                      !
+!=======================================================================
+!
+      USE mod_param
+!
+      implicit none
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+!
+#include "tile.h"
+!
+#ifdef PROFILE
+      CALL wclock_on (ng, iNLM, 48)
+#endif
+      CALL atm2ocn_coupling_tile (ng, tile,                             &
+     &                            LBi, UBi, LBj, UBj)
+#ifdef PROFILE
+      CALL wclock_off (ng, iNLM, 48)
+#endif
+!
+      RETURN
+      END SUBROUTINE atm2ocn_coupling
+!
+!***********************************************************************
+      SUBROUTINE atm2ocn_coupling_tile (ng, tile,                       &
+                                        LBi, UBi, LBj, UBj)
+!***********************************************************************
+!
+      USE mod_param
+      USE mod_parallel
+      USE mod_coupler
+      USE mod_forces
+      USE mod_sources, only : SOURCES, Nsrc
+      USE mod_ocean
+      USE mod_ncparam
+      USE mod_scalars
+      USE mod_stepping
+      USE mod_iounits
+      USE mod_grid 
+      USE exchange_2d_mod
+# ifdef DISTRIBUTE
+      USE distribute_mod,  ONLY : mp_reduce
+      USE mp_exchange_mod, ONLY : mp_exchange2d
+# endif
+!
+      implicit none
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+      integer, intent(in) :: LBi, UBi, LBj, UBj
+!
+!  Local variable declarations.
+!
+      integer :: i, j, k, gtype, id, is, itrc, status
+      real(r8) :: cff1, cff2
+      real(r8) :: Hscale
+      real(r8) :: Hscale2
+      real(r8), parameter :: Large = 1.0E+20_r8
+!
+# include "set_bounds.h"
+!
+      Hscale = rho0*Cp
+      Hscale2 = 1.0_r8/(rho0*Cp)
+!
+!-----------------------------------------------------------------------
+!  Import fields from river discharge model (HD) to ocean model (ROMS).
+!-----------------------------------------------------------------------
+!
+#ifdef HD_COUPLING
+     IF ((LuvSrc(ng).or.LwSrc(ng))) THEN
+       DO is = 1, Nsrc(ng)
+         IF (rdata(ng)%R1dis(is) .lt. Large) THEN
+           SOURCES(ng)%Qbar(is) = rdata(ng)%R1dis(is)
+# ifdef SOLVE3D
+           DO k = 1, N(ng)
+             SOURCES(ng)%Qsrc(is,k) = SOURCES(ng)%Qbar(is)*                 &
+                                      SOURCES(ng)%Qshape(is,k)
+           END DO
+           DO itrc=1,NT(ng)
+             IF (LtracerSrc(itrc,ng) .and. itrc .eq. isalt) THEN
+               DO k = 1, N(ng)
+                 SOURCES(ng)%Tsrc(is,k,isalt) = rdata(ng)%RSdis(is) 
+               END DO
+             END IF
+             IF (LtracerSrc(itrc,ng) .and. itrc .eq. itemp) THEN
+               DO k = 1, N(ng)
+                 SOURCES(ng)%Tsrc(is,k,itemp) = rdata(ng)%RTdis(is)
+               END DO
+             END IF
+           END DO      
+# endif
+         END IF
+       END DO 
+     END IF  
+#endif
+!
+!-----------------------------------------------------------------------
+!  Import fields from atmosphere model (RegCM) to ocean model (ROMS).
+!-----------------------------------------------------------------------
+!
+#if defined BULK_FLUXES || defined ECOSIM || defined ATM_PRESS
+!
+!-----------------------------------------------------------------------
+!  Surface air pressure (mb)
+!-----------------------------------------------------------------------
+!
+      id = idPair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Pair,                               &
+     &                    FORCES(ng)%Pair,                              &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+#if defined BULK_FLUXES || defined ECOSIM || \
+   (defined SHORTWAVE && defined ANA_SRFLUX)
+!
+!-----------------------------------------------------------------------
+!  Surface air humidity (g/kg) 
+!-----------------------------------------------------------------------
+!
+      id = idQair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Qair,                               &
+     &                    FORCES(ng)%Hair,                              &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface (2m) air temperature (Celsius) 
+!-----------------------------------------------------------------------
+!
+      id = idTair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Tair,                               &
+     &                    FORCES(ng)%Tair,                              &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+#if defined BULK_FLUXES || defined ECOSIM
+!
+!-----------------------------------------------------------------------
+!  U-wind (10m) component (m/s)
+!-----------------------------------------------------------------------
+!
+      id = idUair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Uwind,                              &
+     &                    FORCES(ng)%Uwind,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  V-wind (10m) component (m/s)
+!-----------------------------------------------------------------------
+!
+      id = idVair
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Vwind,                              &
+     &                    FORCES(ng)%Vwind,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#ifdef CURVGRID
+!
+!-----------------------------------------------------------------------
+!  Rotate wind components 
+!-----------------------------------------------------------------------
+!
+       DO j=JstrR,JendR
+        DO i=IstrR,IendR
+          cff1=FORCES(ng)%Uwind(i,j)*GRID(ng)%CosAngler(i,j)+           &
+     &         FORCES(ng)%Vwind(i,j)*GRID(ng)%SinAngler(i,j)
+          cff2=FORCES(ng)%Vwind(i,j)*GRID(ng)%CosAngler(i,j)-           &
+     &         FORCES(ng)%Uwind(i,j)*GRID(ng)%SinAngler(i,j)
+          FORCES(ng)%Uwind(i,j)=cff1
+          FORCES(ng)%Vwind(i,j)=cff2
+        END DO
+      END DO      
+!
+      IF (EWperiodic(ng).or.NSperiodic(ng)) THEN
+        CALL exchange_r2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          FORCES(ng)%UWind)
+        CALL exchange_r2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          FORCES(ng)%VWind)
+      END IF
+!
+# ifdef DISTRIBUTE
+        CALL mp_exchange2d (ng, tile, iNLM, 2,                          &
+     &                      LBi, UBi, LBj, UBj,                         &
+     &                      NghostPoints,                               &
+     &                      EWperiodic(ng), NSperiodic(ng),             &
+     &                      FORCES(ng)%UWind,                           &
+     &                      FORCES(ng)%VWind)
+# endif
+#endif
+#endif
+#ifdef BULK_FLUXES
+!
+!-----------------------------------------------------------------------
+!  Precipitation (kg/m2/s) 
+!-----------------------------------------------------------------------
+!
+      id = idrain
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Rain,                               &
+     &                    FORCES(ng)%rain,                              &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#ifdef LONGWAVE_OUT
+!
+!-----------------------------------------------------------------------
+!  Downwelling longwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLdwn
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lwrad_down,                         &
+     &                    FORCES(ng)%lrflx,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#else
+!
+!-----------------------------------------------------------------------
+!  Net longwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLrad 
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lwrad,                              &
+     &                    FORCES(ng)%lrflx,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+!
+!-----------------------------------------------------------------------
+!  Latent heat flux (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idLhea
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Lhflx,                              &
+     &                    FORCES(ng)%lhflx,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Sensible heat flux (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idShea
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Shflx,                              &
+     &                    FORCES(ng)%shflx,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+#ifdef SHORTWAVE
+!
+!-----------------------------------------------------------------------
+!  Shortwave radiation (Celsius m/s) 
+!-----------------------------------------------------------------------
+!
+      id = idSrad
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Swrad,                              &
+     &                    FORCES(ng)%srflx,                             &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+#ifndef BULK_FLUXES
+!
+!-----------------------------------------------------------------------
+!  Surface net heat flux.
+!-----------------------------------------------------------------------
+!
+      id = idTsur(itemp) 
+      gtype = r2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Nhflx,                              &
+     &                    FORCES(ng)%stflx(:,:,itemp),                  &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status) 
+!
+!-----------------------------------------------------------------------
+!  Surface net freshwater flux: E-P.
+!  River discharge can be imposed as surface boundary condition (R2dis)
+!-----------------------------------------------------------------------
+!
+      id = idsfwf 
+      gtype = r2dvar
+#ifdef HD_COUPLING
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%EminP-rdata(ng)%R2dis,              &
+     &                    FORCES(ng)%stflx(:,:,isalt),                  &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#else
+      rdata(ng)%R2dis = FORCES(ng)%stflx(:,:,isalt)
+!
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%EminP+rdata(ng)%R2dis,              &
+     &                    FORCES(ng)%stflx(:,:,isalt),                  &
+#ifdef MASKING
+     &                    GRID(ng)%rmask,                               &
+#endif
+     &                    status)
+#endif
+!
+!-----------------------------------------------------------------------
+!  Surface U-wind stress (Pa)
+!-----------------------------------------------------------------------
+!
+      id = idUsms 
+      gtype = u2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    Istr , IendR, JstrR, JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Ustr,                               &
+     &                    FORCES(ng)%sustr,                             &
+#ifdef MASKING
+     &                    GRID(ng)%umask,                               &
+#endif
+     &                    status)
+!
+!-----------------------------------------------------------------------
+!  Surface V-wind stress (Pa)
+!-----------------------------------------------------------------------
+!
+      id = idVsms
+      gtype = v2dvar
+      CALL ROMS_import2d (ng, tile, gtype,                              &
+     &                    IstrR, IendR, Jstr , JendR,                   &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    rdata(ng)%Vstr,                               &
+     &                    FORCES(ng)%svstr,                             &
+#ifdef MASKING
+     &                    GRID(ng)%vmask,                               &
+#endif
+     &                    status)
+#ifdef CURVGRID
+!
+!-----------------------------------------------------------------------
+!  Rotate stress components 
+!-----------------------------------------------------------------------
+!
+      DO j=JstrR,JendR
+        DO i=IstrR,IendR
+          cff1=FORCES(ng)%sustr(i,j)*GRID(ng)%CosAngler(i,j)+           &
+     &         FORCES(ng)%svstr(i,j)*GRID(ng)%SinAngler(i,j)
+          cff2=FORCES(ng)%svstr(i,j)*GRID(ng)%CosAngler(i,j)-           &
+     &         FORCES(ng)%sustr(i,j)*GRID(ng)%SinAngler(i,j)
+          FORCES(ng)%sustr(i,j)=cff1
+          FORCES(ng)%svstr(i,j)=cff2
+        END DO
+      END DO
+!
+      IF (EWperiodic(ng).or.NSperiodic(ng)) THEN
+        CALL exchange_u2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          FORCES(ng)%sustr)
+        CALL exchange_v2d_tile (ng, tile,                               &
+     &                          LBi, UBi, LBj, UBj,                     &
+     &                          FORCES(ng)%svstr)
+      END IF
+!
+# ifdef DISTRIBUTE
+        CALL mp_exchange2d (ng, tile, iNLM, 2,                          &
+     &                      LBi, UBi, LBj, UBj,                         &
+     &                      NghostPoints,                               &
+     &                      EWperiodic(ng), NSperiodic(ng),             &
+     &                      FORCES(ng)%sustr,                           &
+     &                      FORCES(ng)%svstr)
+# endif
+#endif
+#endif
+!
+      RETURN
+      END SUBROUTINE atm2ocn_coupling_tile
+
+      SUBROUTINE allocate_atm2ocn (ng, LBi, UBi, LBj, UBj)
+      USE mod_param
+      USE mod_sources, only : Nsrc
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, LBi, UBi, LBj, UBj
+!
+      IF (ng .eq. 1) allocate(rdata(Ngrids))
+!
+      allocate(rdata(ng)%Pair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Tair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Qair(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Swrad(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lwrad(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lwrad_down(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Lhflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Shflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Nhflx(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%EminP(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Ustr(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Vstr(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Rain(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Uwind(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%Vwind(LBi:UBi,LBj:UBj))
+      allocate(rdata(ng)%R2dis(LBi:UBi,LBj:UBj))
+!
+      IF (allocated(Nsrc)) THEN     
+        allocate(rdata(ng)%R1dis(Nsrc(ng)))
+        allocate(rdata(ng)%RTdis(Nsrc(ng)))
+        allocate(rdata(ng)%RSdis(Nsrc(ng)))
+      END IF
+!
+      IF (ng .eq. 1) allocate(CoupleSteps(Ngrids))
+!
+      RETURN
+      END SUBROUTINE allocate_atm2ocn
+!
+      SUBROUTINE initialize_atm2ocn (ng, tile)
+      USE mod_param
+      USE mod_scalars
+      USE mod_sources, only : Nsrc
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile
+!
+!  Local variable declarations.
+!
+      integer :: Imin, Imax, Jmin, Jmax
+      integer :: i, j, k, is
+!
+      real(r8), parameter :: IniVal = 1.0e20_r8
+      real(r8), parameter :: IniZer = 0.0_r8
+!
+!  Set array initialization range.
+!
+#ifdef _OPENMP
+      IF (WESTERN_EDGE) THEN
+        Imin=BOUNDS(ng)%LBi(tile)
+      ELSE
+        Imin=Istr
+      END IF
+      IF (EASTERN_EDGE) THEN
+        Imax=BOUNDS(ng)%UBi(tile)
+      ELSE
+        Imax=Iend
+      END IF
+      IF (SOUTHERN_EDGE) THEN
+        Jmin=BOUNDS(ng)%LBj(tile)
+      ELSE
+        Jmin=Jstr
+      END IF
+      IF (NORTHERN_EDGE) THEN
+        Jmax=BOUNDS(ng)%UBj(tile)
+      ELSE
+        Jmax=Jend
+      END IF
+#else
+      Imin=BOUNDS(ng)%LBi(tile)
+      Imax=BOUNDS(ng)%UBi(tile)
+      Jmin=BOUNDS(ng)%LBj(tile)
+      Jmax=BOUNDS(ng)%UBj(tile)
+#endif
+!
+      DO j=Jmin,Jmax
+        DO i=Imin,Imax
+          rdata(ng)%Pair(i,j) = IniVal
+          rdata(ng)%Tair(i,j) = IniVal
+          rdata(ng)%Qair(i,j) = IniVal
+          rdata(ng)%Swrad(i,j) = IniVal
+          rdata(ng)%Lwrad(i,j) = IniVal
+          rdata(ng)%Lwrad_down(i,j) = IniVal
+          rdata(ng)%Lhflx(i,j) = IniVal
+          rdata(ng)%Shflx(i,j) = IniVal
+          rdata(ng)%Rain(i,j) = IniVal
+          rdata(ng)%Uwind(i,j) = IniVal
+          rdata(ng)%Vwind(i,j) = IniVal
+          rdata(ng)%Nhflx(i,j) = IniVal
+          rdata(ng)%EminP(i,j) = IniVal
+          rdata(ng)%Ustr(i,j) = IniVal
+          rdata(ng)%Vstr(i,j) = IniVal
+          rdata(ng)%R2dis(i,j) = IniZer
+        END DO
+      END DO  
+!
+      IF (allocated(Nsrc)) THEN
+        DO is = 1,Nsrc(ng) 
+          rdata(ng)%R1dis(is) = IniZer 
+          rdata(ng)%RTdis(is) = IniZer 
+          rdata(ng)%RSdis(is) = IniZer 
+        END DO
+      END IF
+!
+      RETURN
+      END SUBROUTINE initialize_atm2ocn
+
+      SUBROUTINE ROMS_import2d (ng, tile, gtype,                        &
+     &                          Imin, Imax, Jmin, Jmax,                 &
+     &                          LBi, UBi, LBj, UBj,                     & 
+     &                          InpField,                               &
+     &                          OutField,                               &
+#ifdef MASKING
+     &                          gmask,                                  &        
+#endif
+     &                          status)
+      USE mod_param
+      USE mod_scalars
+      USE mod_ncparam
+      USE exchange_2d_mod
+# ifdef DISTRIBUTE
+      USE distribute_mod,  ONLY : mp_reduce
+      USE mp_exchange_mod, ONLY : mp_exchange2d
+# endif
+!
+!  Imported variable declarations.
+!
+      integer, intent(in) :: ng, tile, gtype
+      integer, intent(in) :: Imin, Imax, Jmin, Jmax
+      integer, intent(in) :: LBi, UBi, LBj, UBj
+      real(r8), intent(in) ::  InpField(:,:)
+      real(r8), intent(out) :: OutField(LBi:UBi,LBj:UBj)
+#ifdef MASKING
+      real(r8), intent(in) :: gmask(LBi:UBi,LBj:UBj)
+#endif
+      integer, intent(out) :: status
+!
+!  Local variable declarations.
+!
+      integer :: i, j
+      real(r8) :: OutFmin, OutFmax
+      real(r8), parameter :: Large = 1.0E+20_r8
+      real(r8), parameter :: Large2 = Large/2.0_r8
+      real(r8), dimension(2) :: range
+# ifdef DISTRIBUTE
+      character (len=3), dimension(2) :: op_handle
+# endif
+!
+!-----------------------------------------------------------------------
+!  Import 2D field (update also halo regions).
+!-----------------------------------------------------------------------
+!
+      status=0
+      range(1)= Large
+      range(2)=-Large
+      where ( InpField .LT. Large2 ) OutField = InpField
+      range(1)=MINVAL(OutField,mask=( OutField .GT. Large2 ))
+      range(2)=MAXVAL(OutField,mask=( OutField .GT. Large2 ))
+!
+!-----------------------------------------------------------------------
+!  Apply land-sea mask 
+!-----------------------------------------------------------------------
+!
+#ifdef MASKING
+      OutField = OutField*gmask
+#endif
+# ifdef DISTRIBUTE
+!
+!-----------------------------------------------------------------------
+!  Global reduction for imported field range values.
+!-----------------------------------------------------------------------
+!
+      op_handle(1)='MIN'
+      op_handle(2)='MAX'
+      CALL mp_reduce (ng, iNLM, 2, range, op_handle)
+      OutFmin=range(1)
+      OutFmax=range(2)
+# endif
+!
+!-----------------------------------------------------------------------
+!  Exchange boundary information.
+!-----------------------------------------------------------------------
+!
+      IF (EWperiodic(ng).or.NSperiodic(ng)) THEN
+        IF (gtype.eq.r2dvar) THEN
+          CALL exchange_r2d_tile (ng, tile,                             &
+     &                            LBi, UBi, LBj, UBj,                   &
+     &                            OutField)
+        ELSE IF (gtype.eq.u2dvar) THEN
+          CALL exchange_u2d_tile (ng, tile,                             &
+     &                            LBi, UBi, LBj, UBj,                   &
+     &                            OutField)
+        ELSE IF (gtype.eq.v2dvar) THEN
+          CALL exchange_v2d_tile (ng, tile,                             &
+     &                            LBi, UBi, LBj, UBj,                   &
+     &                            OutField) 
+        END IF
+      END IF
+# ifdef DISTRIBUTE
+      CALL mp_exchange2d (ng, tile, iNLM, 1,                            &
+     &                    LBi, UBi, LBj, UBj,                           &
+     &                    NghostPoints,                                 &
+     &                    EWperiodic(ng), NSperiodic(ng),               &
+     &                    OutField)
+# endif
+      RETURN
+      END SUBROUTINE ROMS_import2d
 #endif
       END MODULE ocean_coupler_mod
diff -Naur -X exclude.pats day2/src/roms-r809/ROMS/Drivers/nl_ocean.h day3/src/ocn/roms-r809/ROMS/Drivers/nl_ocean.h
--- day2/src/roms-r809/ROMS/Drivers/nl_ocean.h	2016-08-11 12:15:22.000000000 +0300
+++ day3/src/ocn/roms-r809/ROMS/Drivers/nl_ocean.h	2016-08-11 11:32:46.000000000 +0300
@@ -265,8 +265,13 @@
 
       IF (exit_flag.ne.NoError) RETURN
 !
+#ifdef REGCM_COUPLING
+ 10   FORMAT (1x,a,1x,'ROMS/TOMS: started time-stepping:',              &
+     &        ' (Grid: ',i2.2,' TimeSteps: ',i12.12,' - ',i12.12,')')
+#else
  10   FORMAT (1x,a,1x,'ROMS/TOMS: started time-stepping:',              &
      &        ' (Grid: ',i2.2,' TimeSteps: ',i8.8,' - ',i8.8,')')
+#endif
 
       RETURN
       END SUBROUTINE ROMS_run
diff -Naur -X exclude.pats day2/src/roms-r809/ROMS/Nonlinear/bulk_flux.F day3/src/ocn/roms-r809/ROMS/Nonlinear/bulk_flux.F
--- day2/src/roms-r809/ROMS/Nonlinear/bulk_flux.F	2016-08-11 12:15:04.000000000 +0300
+++ day3/src/ocn/roms-r809/ROMS/Nonlinear/bulk_flux.F	2016-08-11 11:35:24.000000000 +0300
@@ -528,7 +528,11 @@
 !
 !  Compute latent heat of vaporization (J/kg) at sea surface, Hlv.
 !
+#ifdef REGCM_COUPLING
+          Hlv(i,j)=2.5104E+6_r8 ! to be consistent with RegCM
+#else
           Hlv(i,j)=(2.501_r8-0.00237_r8*TseaC(i))*1.0E+6_r8
+#endif
 !
 !  Assume that wind is measured relative to sea surface and include
 !  gustiness.
@@ -739,7 +743,9 @@
      &                                     (blk_Cpa*diffh))
           Hsr=rain(i,j)*wet_bulb*blk_Cpw*                               &
      &        ((TseaC(i)-TairC(i))+(Qsea(i)-Q(i))*Hlv(i,j)/blk_Cpa)
+# ifndef REGCM_COUPLING
           SHeat(i,j)=(Hs+Hsr)
+# endif
 # ifdef MASKING
           SHeat(i,j)=SHeat(i,j)*rmask(i,j)
 # endif
@@ -756,7 +762,9 @@
           upvel=-1.61_r8*Wstar(i)*Qstar(i)-                             &
      &          (1.0_r8+1.61_r8*Q(i))*Wstar(i)*Tstar(i)/TairK(i)
           Hlw=rhoAir(i)*Hlv(i,j)*upvel*Q(i)
+# ifndef REGCM_COUPLING
           LHeat(i,j)=(Hl+Hlw)
+# endif
 # ifdef MASKING
           LHeat(i,j)=LHeat(i,j)*rmask(i,j)
 # endif
diff -Naur -X exclude.pats day2/src/roms-r809/ROMS/Nonlinear/main3d.F day3/src/ocn/roms-r809/ROMS/Nonlinear/main3d.F
--- day2/src/roms-r809/ROMS/Nonlinear/main3d.F	2016-08-11 12:14:59.000000000 +0300
+++ day3/src/ocn/roms-r809/ROMS/Nonlinear/main3d.F	2016-08-11 11:37:32.000000000 +0300
@@ -81,6 +81,9 @@
 # ifdef AIR_OCEAN
       USE ocean_coupler_mod, ONLY : ocn2atm_coupling
 # endif
+# ifdef REGCM_COUPLING
+      USE ocean_coupler_mod, ONLY : atm2ocn_coupling
+# endif
 # ifdef WAVES_OCEAN
       USE ocean_coupler_mod, ONLY : ocn2wav_coupling
 # endif
@@ -182,7 +185,11 @@
               time(ng)=time(ng)+dt(ng)
               tdays(ng)=time(ng)*sec2day
               CALL time_string (time(ng), time_code(ng))
+# ifdef REGCM_COUPLING
+              IF (MOD(step_counter(ng),Rsteps).eq.0) Time_Step=.FALSE.
+# else
               IF (step_counter(ng).eq.Rsteps) Time_Step=.FALSE.
+# endif
             END DO
 !
 !-----------------------------------------------------------------------
@@ -292,6 +299,22 @@
             END DO
             IF (exit_flag.ne.NoError) RETURN
 
+# ifdef REGCM_COUPLING
+!
+!-----------------------------------------------------------------------
+!  Couple atmosphere to ocean model 
+!-----------------------------------------------------------------------
+!
+            DO ig=1,GridsInLayer(nl)
+              ng=GridNumber(ig,nl)
+              DO tile=first_tile(ng),last_tile(ng),+1
+                CALL atm2ocn_coupling (ng, tile)
+              END DO
+!$OMP BARRIER
+            END DO
+            IF (exit_flag.ne.NoError) RETURN
+# endif
+
 # ifdef AIR_OCEAN
 !
 !-----------------------------------------------------------------------
diff -Naur -X exclude.pats day2/src/roms-r809/ROMS/Utility/get_date.F day3/src/ocn/roms-r809/ROMS/Utility/get_date.F
--- day2/src/roms-r809/ROMS/Utility/get_date.F	2016-08-11 12:15:06.000000000 +0300
+++ day3/src/ocn/roms-r809/ROMS/Utility/get_date.F	2016-08-11 11:42:23.000000000 +0300
@@ -284,6 +284,11 @@
      &         (/ 1,32,61,92,122,153,183,214,245,275,306,336,367 /)
 
       real(r8) :: rday
+
+# if defined REGCM_COUPLING && defined MODIFIED_CALDATE
+      integer :: i
+      real(r8) :: sday, nday
+# endif
 !
 !-----------------------------------------------------------------------
 !  Get calendar day from model time.
@@ -292,6 +297,50 @@
 !  The reference time is a positive date specified at initialization.
 !
       IF (INT(r_date(1)).gt.0) THEN
+#if defined REGCM_COUPLING && defined MODIFIED_CALDATE 
+        rday=time+r_date(3)+                                            &
+     &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
+        year=INT(r_date(2))+INT(rday/365.25_r8)
+        sday = 0.0_r8
+        DO i = INT(r_date(2)), year-1
+          leap=MOD(i,4)
+          if (leap.eq.0) THEN
+            nday = 366.0_r8
+          else
+            nday = 365.0_r8
+          end if
+          sday = sday+nday
+        END DO
+        IF (rday .lt. sday) year = year-1
+        IF (year .eq. INT(r_date(2))) THEN
+          yday = rday
+        ELSE
+          IF ((sday-rday) .lt. 0.0_r8) THEN
+            yday = MAX(1.0_r8, rday-sday)
+          ELSE
+            yday = rday-(sday-nday)+1
+          END IF
+        END IF
+        leap=MOD(year,4)
+        IF (leap.eq.0) THEN
+          month=0
+          DO i = 1, 12
+            IF ((yday .GE. iydl(i)) .AND. (yday .LT. iydl(i+1))) THEN
+              month = i
+            END IF
+          END DO
+          day=INT(yday)-iydl(month)+1
+        ELSE
+          month=0
+          DO i = 1, 12
+            IF ((yday .GE. iyd(i)) .AND. (yday .LT. iyd(i+1))) THEN
+              month = i
+            END IF
+          END DO
+          day=INT(yday)-iyd(month)+1
+        END IF
+        hour=(rday-AINT(rday))*24.0_r8
+#else
         rday=time+r_date(3)+                                            &
      &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
         year=INT(r_date(2))+INT(rday/365.25_r8)
@@ -306,6 +355,7 @@
           day=INT(yday)-iydl(month)+1
         END IF
         hour=(rday-AINT(rday))*24.0_r8
+#endif
 !
 !  The reference time is for a climatological simulation with 365.25
 !  days in every year.
@@ -330,6 +380,23 @@
 !  days in every year.
 !
       ELSE IF (INT(r_date(1)).eq.-1) THEN
+#if defined REGCM_COUPLING && defined MODIFIED_CALDATE
+        rday=time+r_date(3)+                                            &
+     &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
+        IF (r_date(2).eq.1) THEN
+          year=INT(rday/360.0_r8)
+        ELSE
+          year=INT(r_date(2))+INT(rday/360.0_r8)
+        END IF
+        yday=MAX(1.0_r8,MOD(rday,360.0_r8))
+        month=INT(yday/30.0_r8)+1
+        IF (rday .gt. 360.0_r8) THEN
+          day=INT(MOD(yday,30.0_r8))
+        ELSE
+          day=CEILING(MOD(yday,30.0_r8))
+        END IF
+        hour=(rday-AINT(rday))*24.0_r8
+#else
         rday=time+r_date(3)+                                            &
      &       (r_date(6)+(r_date(7)+r_date(8)/60.0_r8)/60.0_r8)/24.0_r8
         year=INT(r_date(2))+INT(rday/360.0_r8)
@@ -337,6 +404,7 @@
         month=INT(yday/30.0_r8)
         day=INT(MOD(yday,30.0_r8))
         hour=(rday-AINT(rday))*24.0_r8
+#endif
 !
 !  The reference time is in terms of modified Julian days.
 !
@@ -504,13 +572,21 @@
 !
       real(r8), intent(in) :: time
 
+#if defined REGCM_COUPLING && defined MODIFIED_CALDATE
+      character(len=20), intent(out) :: time_code
+#else
       character(len=14), intent(out) :: time_code
+#endif
 !
 !  Local variable declarations.
 !
       integer :: iday, ihour, isec, minute
 
+#if defined REGCM_COUPLING && defined MODIFIED_CALDATE
+      character (len=20) :: text
+#else
       character (len=14) :: text
+#endif
 !
 !-----------------------------------------------------------------------
 !  Encode current mode time.
@@ -523,7 +599,11 @@
       isec=MOD(isec,60)
 !
       WRITE (text,10) iday, ihour, minute, isec
+#if defined REGCM_COUPLING && defined MODIFIED_CALDATE
+ 10   FORMAT (i11,1x,i2.2,':',i2.2,':',i2.2)
+#else
  10   FORMAT (i5,1x,i2.2,':',i2.2,':',i2.2)
+#endif
       time_code=text
 
       RETURN
diff -Naur -X exclude.pats day2/src/roms-r809/ROMS/Utility/inp_par.F day3/src/ocn/roms-r809/ROMS/Utility/inp_par.F
--- day2/src/roms-r809/ROMS/Utility/inp_par.F	2016-08-11 12:15:13.000000000 +0300
+++ day3/src/ocn/roms-r809/ROMS/Utility/inp_par.F	2016-08-11 11:42:56.000000000 +0300
@@ -108,7 +108,11 @@
 !  input parameters to all nodes.
 !
 !!    CALL my_getarg (1, Iname)
+# ifdef REGCM_COUPLING
+      IF (Master) CALL my_getarg (2, Iname)
+# else
       IF (Master) CALL my_getarg (1, Iname)
+# endif
       CALL mp_bcasts (1, model, Iname)
       OPEN (inp, FILE=TRIM(Iname), FORM='formatted', STATUS='old',      &
      &      ERR=20)
